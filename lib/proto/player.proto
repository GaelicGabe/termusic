syntax = "proto3";
package player;

service MusicPlayer {
  // Player Commands
  // Toggle Pause/Play, returns the new state
  rpc TogglePause(Empty) returns (PlayState);
  rpc SkipNext(Empty) returns (Empty);
  rpc SkipPrevious(Empty) returns (Empty);
  rpc GetProgress(Empty) returns (GetProgressResponse);
  rpc VolumeUp(Empty) returns (VolumeReply);
  rpc VolumeDown(Empty) returns (VolumeReply);
  rpc SpeedUp(Empty) returns (SpeedReply);
  rpc SpeedDown(Empty) returns (SpeedReply);
  // Toggle the gapless mdoe, returns the new state.
  rpc ToggleGapless(Empty) returns (GaplessState);
  rpc SeekForward(Empty) returns (PlayerTime);
  rpc SeekBackward(Empty) returns (PlayerTime);

  // Playlist Commands
  rpc PlaySelected(Empty) returns (Empty);
  rpc CycleLoop(Empty) returns (Empty);
  rpc ReloadPlaylist(Empty) returns (Empty);

  // Misc Commands
  rpc ReloadConfig(Empty) returns (Empty);
  rpc SubscribeServerUpdates(Empty) returns (stream StreamUpdates);
}

message Empty {}

// A play status.
message PlayState {
  // The actual status, mapped to [`playback::playlist::Status`]
  uint32 status = 1;
}

message PlayerTime {
  Duration position = 1;
  Duration total_duration = 2;
}

message GetProgressResponse {
  PlayerTime progress = 1;
  uint32 current_track_index = 3;
  uint32 status = 4;
  // actually a u16, but protobuf does not support types lower than 32 bits
  uint32 volume = 5;
  int32 speed = 6;
  bool gapless = 7;
  bool current_track_updated = 8;
  string radio_title = 9;
}

message VolumeReply {
  // actually a u16, but protobuf does not support types lower than 32 bits
  uint32 volume = 1;
}

message SpeedReply {
  int32 speed = 1;
}

// A Gapless state.
message GaplessState {
  bool gapless = 1;
}

// using a custom Duration that matches rust's definition, as rust's may not fit
// into google's well-known Duration
message Duration {
  uint64 secs = 1;
  uint32 nanos = 2;
}

// all updates that can happen from the server side, without the client to have to ask explicitly
// naming convention for the stream update specific messages is to add the "Update" prefix, even if it already exists
message StreamUpdates {
  oneof type {
    UpdateMissedEvents missed_events = 1;
    UpdateVolumeChanged volume_changed = 2;
    UpdateSpeedChanged speed_changed = 3;
    UpdatePlayStateChanged play_state_changed = 4;
    UpdateTrackChanged track_changed = 5;
    UpdateGaplessChanged gapless_changed = 6;
  }
}

// Indicate that some events could not be send
// Like a "Lagged" Error from tokio-stream
message UpdateMissedEvents {
  uint64 amount = 1;
}

// The Volume changed, send new information
message UpdateVolumeChanged {
  // reuse the existing message
  VolumeReply msg = 1;
}

// The Speed changed, send new information
message UpdateSpeedChanged {
  // reuse the existing message
  SpeedReply msg = 1;
}

// TODO: is play-state (playing / paused / ??) the only things this should do?
message UpdatePlayStateChanged {
  // reuse the existing message
  PlayState msg = 1;
}

// The Gapless state changed, send new information.
message UpdateGaplessChanged {
  // reuse the existing message
  GaplessState msg = 1;
}

// The track changed in some way, send new information
// This includes everything from changing to a new track, new radio title, etc
// This is *not* used for regular track progress updates
// NOTE: this may or may not be sent for the initial track after startup as the client may connect after the track started
message UpdateTrackChanged {
  // The index into the playlist of which track changed.
  uint32 current_track_index = 1;
  // Indicates if this update is a change to a new track (not just metadata change)
  bool current_track_updated = 2;

  // all values below should be moved into their own "Track" message at some point
  // instead of having the TUI fetch everything from the file itself
  // radio title, track title
  // the following is (linux protobuf) 3.15, ubuntu 2204 still has (linux protobuf) 3.12
  // optional string title = 3;
  // the following "oneof" is wire equivalent to the above "optional"
  oneof optional_title {
    string title = 3;
  }
  PlayerTime progress = 4;
}
